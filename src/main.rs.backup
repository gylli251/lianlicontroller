use anyhow::{Context, Result};
use gtk::prelude::*;
use gtk::{
    Adjustment, Application, ApplicationWindow, Box as GtkBox, Button, ColorButton, ComboBoxText,
    MessageDialog, Orientation, Scale,
};
use hidapi::HidApi;
use std::sync::Arc;

const VENDOR_ID: u16 = 0x0CF2;
const PRODUCT_ID: u16 = 0xA100;
const REPORT_SIZE: usize = 389;

struct FanController {
    device: hidapi::HidDevice,
}

impl FanController {
    fn new() -> Result<Self> {
        let api = HidApi::new().context("Failed to initialize HIDAPI")?;
        let device = api
            .open(VENDOR_ID, PRODUCT_ID)
            .context("Failed to open HID device")?;
        Ok(Self { device })
    }

    fn set_zone_color(&self, zone: u8, (r, g, b): (u8, u8, u8), brightness: u8) -> Result<()> {
        let mut packet = [0u8; REPORT_SIZE];
        
        // Base header template (from example packets)
        let header = [
            0x1c, 0x00, 0x10, 0x97, 0x71, 0x82, 0x8e, 0xcd, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x1b, 0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x02, 0x69, 0x01, 0x00, 0x00, 0x00,
            0x21, 0x09, 0xe0, 0x30,
        ];

        // Determine zone ID in packet
        let zone_id = match zone {
            1 => 0x30,
            2 => 0x31,
            3 => 0x32,
            4 => 0x33,
            _ => return Err(anyhow::anyhow!("Invalid zone number")),
        };
        let mut header = header.to_vec();
        header[31] = zone_id;

        // Copy header into packet
        packet[..32].copy_from_slice(&header);

        // Apply brightness scaling
        let scale_factor = f32::from(brightness) / 100.0;
        let scaled_r = (f32::from(r) * scale_factor).round() as u8;
        let scaled_g = (f32::from(g) * scale_factor).round() as u8;
        let scaled_b = (f32::from(b) * scale_factor).round() as u8;

        // Fill color data (repeated RGB)
        for i in 0..16 {
            let offset = 32 + i * 3;
            packet[offset] = scaled_r;
            packet[offset + 1] = scaled_g;
            packet[offset + 2] = scaled_b;
        }

        self.device
            .write(&packet)
            .context("Failed to send HID report")?;
        Ok(())
    }
}

fn build_ui(app: &Application, controller: Arc<FanController>) -> ApplicationWindow {
    let window = ApplicationWindow::builder()
        .application(app)
        .title("Lian Li Fan Controller")
        .default_width(300)
        .default_height(200)
        .build();

    // Main vertical box
    let vbox = GtkBox::new(Orientation::Vertical, 10);
    vbox.set_margin_top(10);
    vbox.set_margin_bottom(10);
    vbox.set_margin_start(10);
    vbox.set_margin_end(10);

    // Zone selection
    let zone_combo = ComboBoxText::new();
    for zone in 1..=4 {
        zone_combo.append_text(&format!("Zone {}", zone));
    }
    zone_combo.set_active(Some(0));

    // Color picker
    let color_button = ColorButton::new();

    // Brightness scale
    let adjustment = Adjustment::new(100.0, 0.0, 100.0, 1.0, 10.0, 0.0);
    let brightness_scale = Scale::new(Orientation::Horizontal, Some(&adjustment));
    brightness_scale.set_digits(0);
    brightness_scale.add_mark(0.0, gtk::PositionType::Bottom, None);
    brightness_scale.add_mark(100.0, gtk::PositionType::Bottom, None);

    // Apply button
    let apply_button = Button::with_label("Apply Settings");

    // Pack widgets into the vbox (GTK 3 style)
    vbox.pack_start(&zone_combo, false, false, 0);
    vbox.pack_start(&color_button, false, false, 0);
    vbox.pack_start(&brightness_scale, false, false, 0);
    vbox.pack_start(&apply_button, false, false, 0);

    // Add the box to the window before connecting signals
    window.add(&vbox);

    // Clone the window so the closure doesn't move the original
    let window_for_dialog = window.clone();
    let controller_for_closure = Arc::clone(&controller);

    apply_button.connect_clicked(move |_| {
        let zone = zone_combo.active().unwrap_or(0) as u8 + 1;
        let color = color_button.rgba();
        let brightness = brightness_scale.value() as u8;

        let rgb = (
            (color.red() * 255.0).round() as u8,
            (color.green() * 255.0).round() as u8,
            (color.blue() * 255.0).round() as u8,
        );

        if let Err(e) = controller_for_closure.set_zone_color(zone, rgb, brightness) {
            let error_dialog = MessageDialog::builder()
                .transient_for(&window_for_dialog)
                .modal(true)
                .text("Error")
                .secondary_text(e.to_string())
                .build();
            error_dialog.show_all();
        }
    });

    window
}

fn main() -> Result<()> {
    let controller = FanController::new()?;

    let app = Application::builder()
        .application_id("com.example.FanController")
        .build();

    let controller = Arc::new(controller);
    app.connect_activate(move |app| {
        let window = build_ui(app, Arc::clone(&controller));
        // For GTK 3, explicitly show all widgets
        window.show_all();
    });

    app.run();
    Ok(())
}
